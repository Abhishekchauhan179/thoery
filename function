functions¶
* built-in -funtion
* user defined function
_
print(dir(__builtins__))
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__IPYTHON__', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'display', 'divmod', 'dreload', 'enumerate', 'eval', 'execfile', 'file', 'filter', 'float', 'format', 'frozenset', 'get_ipython', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']
help(max)
Help on built-in function max in module __builtin__:

max(...)
    max(iterable[, key=func]) -> value
    max(a, b, c, ...[, key=func]) -> value
    
    With a single iterable argument, return its largest item.
    With two or more arguments, return the largest argument.

n
help(min)
Help on built-in function min in module __builtin__:

min(...)
    min(iterable[, key=func]) -> value
    min(a, b, c, ...[, key=func]) -> value
    
    With a single iterable argument, return its smallest item.
    With two or more arguments, return the smallest argument.

# you can pass multiple value to max and min function
print("maximum number" ,max(20,30,52,14,85))
print("minimum number",min(20,30,52,14,85))
​
('maximum number', 85)
('minimum number', 14)
# you can also pass an oterable to max and min function
a=[13,42,56,78,98,456]
print("maximum number" ,max(a))
print("minimum number",min(a))
('maximum number', 456)
('minimum number', 13)
a="pythonlanguage"
print(type(a),"lenghth",len(a))
print("first captal",min(a))
print("last captal",max(a))
(<type 'str'>, 'lenghth', 14)
('first captal', 'a')
('last captal', 'y')
sum
help(sum)
Help on built-in function sum in module __builtin__:

sum(...)
    sum(iterable[, start]) -> value
    
    Return the sum of an iterable or sequence of numbers (NOT strings)
    plus the value of 'start' (which defaults to 0).  When the sequence is
    empty, return start.

#
# below statement will give an errors as sum takes
# iterable as an iterable
#print(sum(10,30,45))
print(sum([10,30,45]))
85
orted
help(sorted)
Help on built-in function sorted in module __builtin__:

sorted(...)
    sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list

a=[23,45,23,4,3,546,45,34]
print(a)
a=[23,45,23,4,3,546,45,34]
print(a)
# by default sorted retrn a new list in acording order
b=sorted(a)
print(b)
b=sorted(a,reverse=True)
#b.reverse()
print(b)
​
# you can change the order odf sorting using the reverse keywords
#print(sorted(10,30,45))
[23, 45, 23, 4, 3, 546, 45, 34]
[3, 4, 23, 23, 34, 45, 45, 546]
[546, 45, 45, 34, 23, 23, 4, 3]
a=['a','abhi','abhishek','ok']
print(a)
b=sorted(a)
print(b)
b=sorted(a,reverse=True)
print(b)
['a', 'abhi', 'abhishek', 'ok']
['a', 'abhi', 'abhishek', 'ok']
['ok', 'abhishek', 'abhi', 'a']
# USING THE 'KEYS' ARGUMENT IN SORTED FUNCTION 
# YOU CAN CUSTOMIZE THE SORT ORDERa=['a','abhi','abhishek','ok']
a=['a','abhi','abhishek','ok']
print(a)
b=sorted(a)
print(b)
# sorting based on lenght of string
b=sorted(a,key=len)
print(b)
['a', 'abhi', 'abhishek', 'ok']
['a', 'abhi', 'abhishek', 'ok']
['a', 'ok', 'abhi', 'abhishek']
help(all)
Help on built-in function all in module __builtin__:

all(...)
    all(iterable) -> bool
    
    Return True if bool(x) is True for all values x in the iterable.
    If the iterable is empty, return True.

any
help(any)
Help on built-in function any in module __builtin__:

any(...)
    any(iterable) -> bool
    
    Return True if bool(x) is True for any x in the iterable.
    If the iterable is empty, return False.

a=[0,1,1,1]
print(any(a))
print(all(a))
True
False
# if u give 0 in the list print the false vale
a=[1,1,1,1,2,1]
​
print(type(a),all(a))
(<type 'list'>, True)
b
# if u give any number without zero in the list print the true vale
a=[0,0,0]
b=[1,0,0]
print(any(a))
print(any(b))
False
True
a=[]
print(any(a))
print(all(a))
False
True
)
a=[23,45,23,4,3,546,45,34]
b=iter(a)
print(b)
print(next(b))
print(next(b))
print(next(b))     
​
​
<listiterator object at 0x033153B0>
23
45
23
user defined function
systax:
'''def func_name(optional_argument): '''optional doc string''' body of the function

* by defalut function return non untill otherwise specified 
* there are 6 different types of user defined funtion and an anonyous funtion:
    * no argumet
    * required argument
    * keywords argument
    * variable argument
    * keyword variable argument
    * lamda-----> ANONYMOUS funtion'''
# 1.NO argument
def say_hello():
    '''the funtion print
    hello bacl to the caller'''
    print("hello")
print(type(say_hello))
<type 'function'>
def hi_abhi():
    print("hello  i miss you abhi")
    return 20     
a=hi_abhi()
print(a)
​
print(type(say_hello))
hello  i miss you abhi
20
<type 'function'>
